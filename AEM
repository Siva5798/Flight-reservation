AEM Archetrype
====================
AEM archetype is a project template from which the other projects can  be created 
The archetype involves 
The project structure
POM files
File valut configurations

mvn -B org.apache.maven.plugins:maven-archetype-plugin:3.2.1:generate 
    -D archetypeGroupId=com.adobe.aem 
    -D archetypeArtifactId=aem-project-archetype 
    -D archetypeVersion=39                  ======> archetype version below 30 is preferable because instance may crash on uppper level
    -D appTitle="WKND Sites Project"        ======> name displayed in the site level
    -D appId="wknd"                         ======> crxde app project name 
    -D groupId="com.adobe.aem.guides"       ======> java core bundle 
    -D artifactId="aem-guides-wknd"         ======> folder name of the project setup in local in which it is downloaded from the cloud aem from that archetype it is downloading to local
    -D package="com.adobe.aem.guides.wknd"  =======> no need for now 
    -D version="0.0.1-SNAPSHOT" 
    -D aemVersion="cloud"

Command for deployments
=========================
mvn clean install -PautoInstallSinglePackage
mvn clean install -PautoInstallPackage
mvn clean install -PautoInstallBundle -DskipTests    ===> it will skip the juint test cases 
====================================================================================================================================================
CRXDE Folder 
=================
app folder --> is for the component.
Conf folder--> project/ content fragment.
Content folder --> content is used to store the data which includes media video images etc which is stored inside the DAM 
                   present inside the content folder
                   Tags will be available 
                   Experience fragments 
                   contain content of page and we can see the list of components available on the page.
                   creating more than one users will form a groups in user groups
etc        --> inside the etc folder is for the workflows
libs       --> components will be available in core/wcm/ and foundation components will be available
               MSM will be available under libs..
home folder --> is for user groups and passwords 
===================================================================================================================================================
cq:dialog
sling:resourceType is used to inherit the content of the dialog from the libs

remove the/libs/ and use in the resoucre type
 
/libs/granite/ui/components/coral/foundation =====> will also contains the fields etc
/libs/cq/gui/components/authoring ====> contains the path of the  searchfield status bar etc
/libs/granite/ui/components/coral/foundation/form/multifield ======> all the fields will be available under form

JCR properties like name ./rolnum here this nol number will act as a variable to store the value from the page 
sling:resourceSuperType and sling:resourceType. 
==========================================
sling:resourceSuperType: It is used to achieve inheritance in cq. When set, 
it inherits the specified component to this component.

sling:resourceType: It is a path, which locates the script to be used for rendering the content.
==============================================================================================================================================
JCR in AEM 
================
the JCR in AEM is stored in the form of properties in the crxde console in which the value of the properties are stored in key value pairs

allowing all content in allowed path
/content(/.)?
============================================================================================================================================
Client Library:
================
Adobe introduced clientlibs to manage css,js and required resources (font , images)
Node type of client Library is cq:ClientLibraryFolder
jss.txt & css.txt are mandatory to manage JS and CSS files

the name of the clientLib is given by using categories so that this categories can be called 
dependency
=========
the dependencies property in an clientlib is used for the calling a clientLib before the current clientlib
by which the properties of current currentLib must contain the dependencies of the clientLib which is need to be called before the current.

We want to call all the js and css in seperate folder individually with the help of #base= foldername so all the present in the folder will be called at once in the order maintained
inside the folder

allowProxy = true
==================
in general if the dispatcher is in the local it will block for security reasons the client libs because it will load from /apps/clientlibs/dev1.js 
so if we give allowProxy is true it will convert it load from apps to etc folder so etc/clientlibs/dev1.js 
so dispacter will block the client libs while loading

Embed
=====
if we inspect it and see in the page there wont be two js files if embed property is added only one js will be there which hold all the js in it 
embed will combine the js into single file so that when the current 

==========================================================================================================================================================================================
Fragment 
========
Fragment is very useful because we can able to reuse them on multiples pages and whenever required we can edit them from single location.
    
Content Fragment
================
If we have an content in a page if we want to render the same content in another pages content fragment is used same it is 
applicable to transfer the content to any third party channels or any other websites etc
Content fragmenr model 
=====================
Creating the structure of the cf we have use the cf model 

content fragment are editorial content ,primary text and related images which provides validation also its just pure content without styles 
content fragment allows the you to create channel specific variations abd also we can use the content fragments and its variations while authoring the pages 
content fragmenet component will display the content from the content fragement
content fragment can be exported in an json format using the slingmodel json export capabilities

note : first the model will be created then go to asset and create the content fragment
variations can be used in content fragment with same model we enter diff data and access it in other pages or sites

the cf models is stored in conf/dam/models whereas the content fragments and its variations are store in content/dam/project/contentfragment
=============================================================================================================================================================================================
Experience fragments
===================
create once and reuse it in multiple pages 
it is made up of one or more components , can be created by dynamic templated only , can have different variations which may share content and components 
experience fragments is stored in Content/experience fragment in which it will store as a cq page

  
===============================================================================================================================================================================================
HTL Template (HTML Template Language) html =htl/slightly
-==============================================================
Advantages
Security/Development efficiency/Reduced costs/Java knowledge is not required.

data-sly-use"${}"

@format will be used if you we want assigned values to get in htl from jcr properties @format =properties.title
 if we want to add more than one properties we use array${'yyyy-mm-dd' @format = [properties.jcr:lastmodified, properties]
${'{0} {1} '@format=[properties.jcr:title,properties.text]}

CRX
Valumap is a java class which contains the properties of jcr like propeties/pageProperties/inheritedPageProperties
<p>${inheritedPageProperties.jcr:title}</p>
block statments
=========================
data-sly-use - To initialize JAVA, javascripts,TemplatesObjects

data-sly-include --- to inclue any html files into another
<div data-sly-include="redning.html"></div> to include in same component
if we want to include one html of other to one component we need to get the path of the component

data-sly-resource - To include resources(Components ,content resources)
<div data-sly-resource = ${'button ' @resourceType='/path of the component button' withoutout/apps}"></div>

data-sly-list----- Repeat the host element based on the size of the list
data-sly-test - conditionally removed host element and data
data-sly-unwrap ----------  it is used to remove the unused elements shown in the page div class etc
data-sly-attribute -------- it is used to add the own name in the inspec page

data-sly-template -- to add a template value 
template holds a multifield 
multifield value = valu1 valu2 valu3
data-sly-template.provideanyname="${ value @fname="siva", lname="M S", software "OS"}"
data-sly-call="${value@fname,lname,software)"
data-sly-call --- it is used to call clientlib /template etc 

Components in AEM
=================
Components are the basic building block of the AEM website they can be easily dragged and dropped into the page
components are resuable module that implements specific application logic to render the content in the website
collections of scripts 
two components WCM has two components Core & Foundation

AEM HeadLess
==================
* Provides an api-first content management solution the decouple content from experience.
* allows for maximum content reuse across channels.
* developers can quickly adpot to presentation layers and technology. 
==============================================================================================================================
Content fragment model
content fragment editor
graphQL & content services
==============================================

SLING MODEL:
============
Sling model is an  rest API which is used to map the request to its resource
data-sly-use.slingmodel="/provide the core path "
slingmodel supports both classes and interfaces
ways to create slingmodel
2 ways 
@Model(adaptables=Resource.class)
===================================
@Model(adaptables = Resource.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
If we are having a component it will have a dialog we have authored the data
we wantb to show the data to html we will use resource adaptables

@Model(adaptables = SlingHttpServletRequest.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL, resourceType = "Aem-Site/components/custom_components/compositemultifield")
IF we are having a form component eg form so if we want to get the data while submitted
based on the request attribute in slingmodel and then based the data which is coming into sling model
then we use SlingHttpServletRequest.class adaptables

Injection strategy (Default or Optional) 
By default if you want all the properties to injected in optional or default choose them and define it 

Injecting services into model @OSGISERVICE
Injecting one sling model to another slingmodel @SELF 
we will mention the private variable type of the corresponding slingmodel

Advantage of Postcontruct
==========================
after the data coming into java class if we want the dailog to perform custom operations
for ex if we have a text field we have authored the text and saved and with the text we want 
to call an api with post construct method and fetch some more data then in the case 
we use post contruct
after injection are done post construct will be exectured
@Inject 
It will inject the value in the node property data to the sling model class(resource)
@default
if you are not entering any values in a particular field it will return the default value of which it is assigned

@Named 
eg we are accessing the resourceType in the jcr properties in java class we cant able to define the sling:Resourcetype directlt
we use @Named(sling:resourceType) so that it can able to access them i
@via
Via is used super resource type property to access in the child resource type we 
use via
@valuemapvalue
fetch data from one request adaptablity from the request parameter into sling model we use 

@ScriptVariable 
Script relatable information to be provided in sling model we use Scriptvariable 
for eg if we want to access the page related information we want page manager to be cruded with page so therefor we /
create a scriptvariable and it helps us to acceess the page 

eg:
@ScriptVariable
Page page;

@ResourcePath(path=/......)@Via("resource")
Resource resourcePath;

@SELF
@Model(adaptables=Resource.class) will define the resource classes in class level 
if we want to access the resource in the field level use 
@Self
Resource resource

@ResourcePath
@ResourcePath with the help of this we can able to get the path define in the jcr properties

@childResource
If we want any values or acees the child page we can use this page

@RequestAttribute
if we want to pass the value from HTL to Slingmodel we will use request attribute

in htl @htlattrobute ='htlvalue'
in model we call like
@RequestAttribute(name="htlattrobute")
private String htlvalue


Valuemapvalue
=====================================================================================================
Sling Schedular
Everything in aem is a OSGI service except slingmodel @Model other @Component

A schedular is a service to schedule jobs, thus we want some work to happen at a
particular time or at a regular interval of time we want schedulars 
there are two ways 1.) whiteboard pattern//depricated 2.) Schedular API

Execute the schedulars in diff ways 
eg: data|time|Cron expression-> 1 1 1 0 0 ** date
======================================================================================================================================
package: org.apache.sling.commons.schedular
A scheduler is to schedule time/cron based jobs
A job is an object which is executed /fired by the scheduler
The object in the schedular API should implement job interface or the Runnable interface

Methods of Schedular
==================
1)SchedulerOptions AT(Date date) :
    Create a schedule to fire a job once at a specific date
2)SchedulerOptions AT(Date date, int times,long period):
    Create a schedule to fire a job period starting at a specific date.
3)SchedulerOptions EXPR(String expression)
    Create a schedule Options to schedule the job based on the expressions
4)SchedulerOptions Now()
    Create a schedule options to fire immediately and only once;
eg Now()-> only once
   Now(3,5) 1,5 means job running first time and wait for 5 seconds and then (2,5)
   then(3,5)
5)boolean schedule (Object job, ScheduleOptions options):
    schedule a job based on the options
6)boolean unschedule (String jobname):
    Removed a schedule job by name.
===============================================================================Ma======
Manualy we need to define the job name 
ScheduleOptions
package: org.apache.sling.commons.schedular
SchedularOptions provide an extensive way of defining how tpo schedule a job
An options can be created viw the schedular

1) ScheduleOptions config(Map<Serilaization,String>config);
    Add optional configuration for the job.
2.)ScheduleOptions name(String name):
    Set the name of the job.
    A job only needs a name if its scheduled and should be cancelled later on.
3.) ScheduleOptions canRunConcurrently(boolean flag):
    Flag indicating whether the job can be run concurrently.

=================================================================================================

