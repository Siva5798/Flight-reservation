Java Notes 

String:
The String class represents character strings. All string literals in Java programs, such as "abc", are implemented as instances of this class.
Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example:

     String str = "abc";
=============================================================================================================
StringBuilder :
==============
A mutable sequence of characters. This class provides an API compatible with StringBuffer, 
but with no guarantee of synchronization. This class is designed for use as a drop-in replacement for StringBuffer in places
where the string buffer was being used by a single thread (as is generally the case). 
Where possible, it is recommended that this class be used in preference to StringBuffer 
as it will be faster under most implementations.The principal operations on a StringBuilder are the append and insert 
methods, which are overloaded so as to accept data of any type. Each effectively converts a given datum to a string
and then appends or inserts the characters of that string to the string builder. 
The append method always adds these characters at the end of the builder; the insert method 
adds the characters at a specified point.

For example,
if z refers to a string builder object whose current contents are "start", then the method call z.append("le") 
would cause the string builder to contain "startle", whereas z.insert(4, "le")
would alter the string builder to contain "starlet".
In general, if sb refers to an instance of a StringBuilder,
then sb.append(x) has the same effect as sb.insert(sb.length(), x).
Every string builder has a capacity. As long as the length of the character sequence contained 
in the string builder does not exceed the capacity, it is not necessary to allocate a new internal buffer. 
If the internal buffer overflows, it is automatically made larger.

Instances of StringBuilder are not safe for use by multiple threads. If such synchronization
is required then it is recommended that StringBuffer be used.Unless otherwise noted,
passing a null argument to a constructor or method in this class will cause a NullPointerException to be thrown.

API Note:
StringBuilder implements Comparable but does not override equals. 
Thus, the natural ordering of StringBuilder is inconsistent with equals.
Care should be exercised if StringBuilder objects are used as keys in a SortedMap or elements in a SortedSet.
See Comparable, SortedMap, or SortedSet for more information.

===========================================================================================================================
StringBuffer:
=========
A thread-safe, mutable sequence of characters. 
A string buffer is like a String, but can be modified. 
At any point in time it contains some particular sequence of characters, but the length and content of the sequence
can be changed through certain method calls.
String buffers are safe for use by multiple threads.The methods are synchronized where necessary 
so that all the operations on any particular instance behave as if they occur in some serial order 
that is consistent with the order of the method calls made by each of the individual threads involved.

The principal operations on a StringBuffer are the append and insert methods, which are overloaded so as to accept data of any type. 
Each effectively converts a given datum to a string and then appends or inserts the characters of that string to the string buffer. 
The append method always adds these characters at the end of the buffer; the insert method adds the characters at a specified point.

For example, if z refers to a string buffer object whose current contents are "start", then the method call z.append("le") 
would cause the string buffer to contain "startle", whereas z.insert(4, "le") would alter the string buffer to contain "starlet".
In general, if sb refers to an instance of a StringBuffer, then sb.append(x) has the same effect as sb.insert(sb.length(), x).

Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence), 
this class synchronizes only on the string buffer performing the operation, 
not on the source. Note that while StringBuffer is designed to be safe to use 
concurrently from multiple threads, if the constructor or the append or insert 
operation is passed a source sequence that is shared across threads, the calling code must 
ensure that the operation has a consistent and unchanging view of the source sequence for the duration of the operation. 
This could be satisfied by the caller holding a lock during the operation's call, by using an immutable source sequence,
or by not sharing the source sequence across threads.

Every string buffer has a capacity. As long as the length of the character sequence contained in the string buffer does not exceed the capacity, 
it is not necessary to allocate a new internal buffer array. If the internal buffer overflows, it is automatically made larger.
Unless otherwise noted, passing a nullargument to a constructor or method in this class will cause a NullPointerException to be thrown.
As of release JDK 5, this class has been supplemented with an equivalent class designed for use by a single thread, StringBuilder. 
The StringBuilder class should generally be used in preference to this one, as it supports all of the same operations 
but it is faster, as it performs no synchronization.

API Note:
StringBuffer implements Comparable but does not override equals. 
Thus, the natural ordering of StringBuffer is inconsistent with equals. 
Care should be exercised if StringBuffer objects are used as keys in a SortedMap or elements in a SortedSet. 
See Comparable, SortedMap, or SortedSet for more information.
===================================================================================================================

Constructor 
A Constructor method is method that invoked when you create an object instance
The constructor method is called by using new keyword
its purpose to instantitate the object of the class and stores its reference in the reference variable.
Constructor name must be the same as its class name
A Constructor must have no explicit return type
A Java constructor cannot be abstract, static, final, and synchronized
Eg:Shirt myShirt = new Shirt()

In java we can initilise the value and then we create a constructor method for the class we can able 
to assign the value of the variable with the constructor values with the help of this keyword or we can assigned the value in the constructor method 
Now in a another method we can able to give the desired output value which is to be printed 
In Main function we will create the object of the constructor class and with the help of the object wecaan able to 
call the method and get the values.

=====================================================================================================
Method & Argument
==================
An argument is a value that passed during a method call
Method must return values that matches their return type
eg:  Calculator cal = new Calculator()
    double denominator =2.0;
    cal.calculate (5,denominator);//arguments 

Parameter
============
Parameter is the variable defined inside method declaration
eg:  public void calculate(int x, double y)//parameters
     System.out.println(x/y)
second example ==============================
public static  int num1 =5;
public static int num2 =7;
    public static void main(String[] args){
 
        System.out.println("add of numbers: "+result(5,7));
  
    }
    public static int result(int x, int y){
    return(x+y);
    }
}
=====================================================================================================================
Static Keyword
==============
The static keyword in Java is used for memory management mainly. We can apply static keyword with variables, methods, blocks and nested classes. The static keyword belongs to the class than an instance of the class.
The static variable can be used to refer to the common property of all objects (which is not unique for each object), for example, the company name of employees, college name of students, etc.
The static variable gets memory only once in the class area at the time of class loading
==================================================================================================================
This Keyword
============
There can be a lot of usage of Java this keyword. In Java, this is a reference variable that refers to the current object.
this can be used to refer current class instance variable.
this can be used to invoke current cl     ass method (implicitly)
this() can be used to invoke current class constructor.
this can be passed as an argument in the method call.
this can be passed as argument in the constructor call.
this can be used to return the current class instance from the method.

Converting data values
==============
converting string to an int
int myInt = Integer.parseInt(s_name);
converting string to double
double mydouble =Double.parseInt(s_name);

Encapsulation
==============
Encapsulation in Java is a powerful mechanism for storing the data members and data methods of a class together. It is done in the form of a secure field accessible by only the members of the same class.

Encapsulation in Java is the process by which data (variables) and the code that acts upon them (methods) are integrated as a single unit. By encapsulating a class's variables, other classes cannot access them, and only the methods of the class can access them.

a class's variables are hidden from other classes and can only be accessed by the methods of the class in which they are found.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Own words
==========================
declaring the variables to private and access setting their values in the constructor now create a new object in the main method and access the values with object 

if i have a private method and return the  no value  then then function of the method is printed in the constryuctor class
if i have a private method and return the value then in the main function we need to create a new variable, with the help of the variable we can assigne the private method value to this variable with the help of the object

Example 
public class Encapsulation {
    private int id;
    private String st;
    private double price;
    private static int nextId =1;

    public Encapsulation(){
        st="Siva Thanu M S";
        price = 1.08;
        setId();
      //  System.out.println("ID : "+id);

    }
    private int setId(){
       return id=Encapsulation.nextId++;
    }
public static void main(String[] args){
    Encapsulation ec = new Encapsulation();
    System.out.println("Desc : "+ec.st);
    int i=ec.setId();
    System.out.println("ID:"+i);
    
}
    
}
==============================================================================
getters and setters


====================
Switch()
when you are testing a equality (not range)
a single value
against fixed value at compile time
===============================================

Static keyword/variables
=====================
If an variable is intialised in static keyword therefore the variable is common for all the objects which means that it can be accessed by all the objects present inside the class
the variable which is defined in static can be called from the object of the class but it can also be accesed by the method
name so when static variables can be accssed by both object & methods 

===================================================================================================
Array                                                                    ArrayList
it is single/double/multidimensional                                    It is single dimensional
array is of fixed length                                               dynamic length increased or decresed
length keyword is used to give the total length                        Size() method is used to give the total length
Tt is faster as above we see it of fixed size                          Slower because of dynamic memory 
Primitive data types can be stored directly unlikely object            Primitive data types are not directly added unlikely arrays, they are                                                                            added indirectly with help of autoboxing and unboxing
Assignment operator is used to add the value                           add() method is used to add and get() method is used to get the values in                                                                         the arraylist
=========================================================================================================================
LinkedList
===========
For many cases, the ArrayList is more efficient as it is common to need access to random items in the list, but the LinkedList provides several methods to do certain operations more efficiently
addFirst()	Adds an item to the beginning of the list	
addLast()	Add an item to the end of the list	
removeFirst()	Remove an item from the beginning of the list	
removeLast()	Remove an item from the end of the list	
getFirst()	Get the item at the beginning of the list	
getLast()      Get the item at the end of the list
============================================================================================================================================
Queue
=======
FIFO
 It follows the first-in, first-out (FIFO) principle, which means that the elements are retrieved in the order 
in which they were added to the queue.
add()
poll() remove and return the first element
peek() return the element at the front of queue
remove() remove the FI element if its a queue
=====================================================================================================================
Priority Queue
================
The insertion order is not retained in the PriorityQueue. 
The elements are stored based on the priority order which is ascending by default. 
=========================================================================================================================
Map
=======
The Map interface can only be used with an implementing class. 
It allows to store the values in key-pair combination; 
it does not allow duplicate keys
It allows us to store the null values and null keys.

HashMap
=========
Java HashMap class implements the Map interface which allows us to store key and value pair, 
where keys should be unique
It allows us to store the null elements as well, but there should be only one null key. 
put() method inserts the elements in the map.
putifAbsent() will add new entries if it doesnot exist
putAll() is an inbuilt method of HashMap class that is used for the copy operation. The method copies all of the elements i.e., the mappings, from one map into another.
HashMap maintains no order
================================================================================================================================
Difference between HashSet and HashMap
=====================================
HashSet contains only values 
whereas HashMap contains an entry(key and value).
============================================================================================================================
(100, siva) (200,Thanu) (300,Vishak)
keySet() ===== >      it is used to get the keyvalues
entrySet() ========>  it is used to define {100=siva, etc}
value() =========>    it will get the values
==========================================================================================================================
Exceptions 
======== way of handling errors

public class Main {
  public static void main(String[] args) {
    try {
      int[] myNumbers = {1, 2, 3};
      System.out.println(myNumbers[10]);
    } catch (Exception e) {
      System.out.println("Something went wrong.");
    } finally {
      System.out.println("The 'try catch' is finished.");
    }
  }
}
TRY
====
The try statement allows you to define a block of code to be
tested for errors while it is being executed.
Catch
======
The catch statement allows you to define a block of code to be executed, 
if an error occurs in the try block.
Finally
========
finally will execute any way regardless of the result
Throws
========
The throw statement allows you to create a custom error.
=========================================================================================================================================
If we are assigning a variable in private so therefore the variable is acccessed within the class so if we want to access the variable field in another class
1.)we can create the method of it in same class and we can get the values from this method with help of object by creating object in othe rclass
2.) or we can create a method and return its value and set it values in other method then with the help pf pbject we can able to set the values in other classes
and get it values with the help of object by calling its respective methods
So this process of binding the data into methods and accessing them is known as encapsulations
=================================================================================================================================================================
this keyword in encapsulatins
============
this is the keyword which represents the current object 
Constructors
=======================
Constructors have the same name as class name 
constructors does not contain any return type
for every creation of a new object, constructor will be exceuted

Super
=======
By default every constructor has the first statment as super keyword 
super() means calling the constructors of the super() class
Naming Conversions
==============================
Camel Casing 

class and interface should start with capital letter -Calc, Runable
variable and methods should be start with small name  ex : marks, show()
constants -all capital PIE, BRAND
// age   MY_DATA//constants
//showMyMarks()
//shw_my_Marrks() 

======================================================================================
Annonymous
======================
We can create a object of a class by using the new keyword and reference variable 
ex : Human object = new Human();
if we are creating the object in an annonymous way we simply use new keyword followed by constructor class
ex new Human(); // annonymous object 
the only pblm is we cannot reuse the object

====================================================================================================================
Inheritance 
//here Calc is the base/super class and AdvCalc is the derived/sub class so called inheritance
    //we use the keyword called extends

when inherited between two classes is known as single level inheritance ex B->A
when inherited between two or more classes is known as multi level inheritance  C->B->A,
meltiple inheritence will not work in java
 ==========================================================================================================================
polymorphism 
=====================
two types 
Complie time polymorphism // overloading same methods with different parameters
Run time polymorphism //overriding same methods with same parameter by extending the class

In inheritance only we can able to perform new object creation for different classes which extends parent classes
==============================================================================================================================================
Final
===========================
final with variable ex final int num =8; it can be changed its constant  
if you give the class name as final we are stopping the inheritance 
method overriding can be also stopped by adding final keyword in method ex public final void show()
===================================================================================================================================================
Object classs
===================
toString()  
===================================================================================================================================================
Abstract keyword
===============================   
abstract method only in abstract class and also whenever a class is extending the abstract class it should have the abstract method or else it will show error

we cannot create the object of object class so with the help of other class reference class
 abtract class can have both normal methods and abstract methods 
 mandatory to apply the drive method here because it extends the abstract class
//if i dont want to call the method fly here , since Car is an abstract class it will show error to define the method fly in volvo
// in other case we can make this volvo class to abstract ,and create a new pbject reference by creating a new class
}
======================================================================================================
Lamda
-------
A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right     in the body of a method.
parameter -> expression
====================================================================================================================================
