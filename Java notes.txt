Java Notes 

String:
The String class represents character strings. All string literals in Java programs, such as "abc", are implemented as instances of this class.
Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example:

     String str = "abc";
=============================================================================================================
StringBuilder :
==============
A mutable sequence of characters. This class provides an API compatible with StringBuffer, 
but with no guarantee of synchronization. This class is designed for use as a drop-in replacement for StringBuffer in places
where the string buffer was being used by a single thread (as is generally the case). 
Where possible, it is recommended that this class be used in preference to StringBuffer 
as it will be faster under most implementations.The principal operations on a StringBuilder are the append and insert 
methods, which are overloaded so as to accept data of any type. Each effectively converts a given datum to a string
and then appends or inserts the characters of that string to the string builder. 
The append method always adds these characters at the end of the builder; the insert method 
adds the characters at a specified point.

For example,
if z refers to a string builder object whose current contents are "start", then the method call z.append("le") 
would cause the string builder to contain "startle", whereas z.insert(4, "le")
would alter the string builder to contain "starlet".
In general, if sb refers to an instance of a StringBuilder,
then sb.append(x) has the same effect as sb.insert(sb.length(), x).
Every string builder has a capacity. As long as the length of the character sequence contained 
in the string builder does not exceed the capacity, it is not necessary to allocate a new internal buffer. 
If the internal buffer overflows, it is automatically made larger.

Instances of StringBuilder are not safe for use by multiple threads. If such synchronization
is required then it is recommended that StringBuffer be used.Unless otherwise noted,
passing a null argument to a constructor or method in this class will cause a NullPointerException to be thrown.

API Note:
StringBuilder implements Comparable but does not override equals. 
Thus, the natural ordering of StringBuilder is inconsistent with equals.
Care should be exercised if StringBuilder objects are used as keys in a SortedMap or elements in a SortedSet.
See Comparable, SortedMap, or SortedSet for more information.

===========================================================================================================================
StringBuffer:
=========
A thread-safe, mutable sequence of characters. 
A string buffer is like a String, but can be modified. 
At any point in time it contains some particular sequence of characters, but the length and content of the sequence
can be changed through certain method calls.
String buffers are safe for use by multiple threads.The methods are synchronized where necessary 
so that all the operations on any particular instance behave as if they occur in some serial order 
that is consistent with the order of the method calls made by each of the individual threads involved.

The principal operations on a StringBuffer are the append and insert methods, which are overloaded so as to accept data of any type. 
Each effectively converts a given datum to a string and then appends or inserts the characters of that string to the string buffer. 
The append method always adds these characters at the end of the buffer; the insert method adds the characters at a specified point.

For example, if z refers to a string buffer object whose current contents are "start", then the method call z.append("le") 
would cause the string buffer to contain "startle", whereas z.insert(4, "le") would alter the string buffer to contain "starlet".
In general, if sb refers to an instance of a StringBuffer, then sb.append(x) has the same effect as sb.insert(sb.length(), x).

Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence), 
this class synchronizes only on the string buffer performing the operation, 
not on the source. Note that while StringBuffer is designed to be safe to use 
concurrently from multiple threads, if the constructor or the append or insert 
operation is passed a source sequence that is shared across threads, the calling code must 
ensure that the operation has a consistent and unchanging view of the source sequence for the duration of the operation. 
This could be satisfied by the caller holding a lock during the operation's call, by using an immutable source sequence,
or by not sharing the source sequence across threads.

Every string buffer has a capacity. As long as the length of the character sequence contained in the string buffer does not exceed the capacity, 
it is not necessary to allocate a new internal buffer array. If the internal buffer overflows, it is automatically made larger.
Unless otherwise noted, passing a nullargument to a constructor or method in this class will cause a NullPointerException to be thrown.
As of release JDK 5, this class has been supplemented with an equivalent class designed for use by a single thread, StringBuilder. 
The StringBuilder class should generally be used in preference to this one, as it supports all of the same operations 
but it is faster, as it performs no synchronization.

API Note:
StringBuffer implements Comparable but does not override equals. 
Thus, the natural ordering of StringBuffer is inconsistent with equals. 
Care should be exercised if StringBuffer objects are used as keys in a SortedMap or elements in a SortedSet. 
See Comparable, SortedMap, or SortedSet for more information.
===================================================================================================================

Constructor 
A Constructor method is method that invoked when you create an object instance
The constructor method is called by using new keyword
its purpose to instantitate the object of the class and stores its reference in the reference variable.
Constructor name must be the same as its class name
A Constructor must have no explicit return type
A Java constructor cannot be abstract, static, final, and synchronized
Eg:Shirt myShirt = new Shirt()

In java we can initilise the value and then we create a constructor method for the class we can able 
to assign the value of the variable with the constructor values with the help of this keyword or we can assigned the value in the constructor method 
Now in a another method we can able to give the desired output value which is to be printed 
In Main function we will create the object of the constructor class and with the help of the object wecaan able to 
call the method and get the values.

=====================================================================================================
Method & Argument
==================
An argument is a value that passed during a method call
Method must return values that matches their return type
eg:  Calculator cal = new Calculator()
    double denominator =2.0;
    cal.calculate (5,denominator);//arguments 

Parameter
============
Parameter is the variable defined inside method declaration
eg:  public void calculate(int x, double y)//parameters
     System.out.println(x/y)
second example ==============================
public static  int num1 =5;
public static int num2 =7;
    public static void main(String[] args){
 
        System.out.println("add of numbers: "+result(5,7));
  
    }
    public static int result(int x, int y){
    return(x+y);
    }
}
=====================================================================================================================
Static Keyword
==============
The static keyword in Java is used for memory management mainly. We can apply static keyword with variables, methods, blocks and nested classes. The static keyword belongs to the class than an instance of the class.
The static variable can be used to refer to the common property of all objects (which is not unique for each object), for example, the company name of employees, college name of students, etc.
The static variable gets memory only once in the class area at the time of class loading
==================================================================================================================
This Keyword
============
There can be a lot of usage of Java this keyword. In Java, this is a reference variable that refers to the current object.
this can be used to refer current class instance variable.
this can be used to invoke current cl     ass method (implicitly)
this() can be used to invoke current class constructor.
this can be passed as an argument in the method call.
this can be passed as argument in the constructor call.
this can be used to return the current class instance from the method.

Converting data values
==============
converting string to an int
int myInt = Integer.parseInt(s_name);
converting string to double
double mydouble =Double.parseInt(s_name);

